INSTALL_FileManipulationError=I/O error encountered during processing component {0}: {1}
INSTALL_OverwriteWithDirectory=Refused to overwrite file with directory: {0}
INSTALL_OverwriteWithFile=Refused to overwrite directory with file: {0}
INSTALL_OverwriteWithLink=Refused to overwrite directory or file with symlink: {0}
INSTALL_ReplacedFileDiffers=Existing file contents differ: {0}. Run with -f to force overwrite.
INSTALL_CannotCleanupFile=Could not clean up file {0}: {1}
INSTALL_ErrorClosingFile=Error closing component file {0}: {1}
INSTALL_SkipIdenticalFile=Skipping identical file: {0}
INSTALL_InstallingFile=Extracting: {0}
INSTALL_ReplacingFile=Replacing: {0}
INSTALL_CreatingDirectory=Creating directory: {0}
INSTALL_CreatingSymlink=Creating symbolic link: {0} -> {1}
INSTALL_CleanupFile=Cleaning up file: {0}
INSTALL_CleanupDirectory=Cleaning up directory: {0}
INSTALL_SkippingSharedFile=Skipping shared file: {0}
INSTALL_FailedToDeleteFile=Failed to remove file {0}: {1}
INSTALL_FailedToDeleteDirectory=Failed to remove directory {0}: {1}
INSTALL_PrepareToInstall=Preparing to install {0}, contains {1}, version {2} ({1})
INSTALL_ErrorDuringProcessing=Installation of {0} failed: {1}
INSTALL_IgnoreFailedInstallation=Ignored failure: {0}
INSTALL_IgnoreFailedInstallation2=Ignored failed installation of {0}: {1}
INSTALL_VerboseValidation=Checking entry: {0}
INSTALL_VerboseCapabilityNone=None
INSTALL_VerboseCheckRequirements=Checking requirements of component {1} ({0}), version {2}
INSTALL_VerboseCapability=\tRequires {0} = {1}, GraalVM provides: {2}
INSTALL_VerboseProcessingArchive=Processing component archive: {0}
INSTALL_InvalidComponentArchive={0} is corrupted or is not a component archive.
INSTALL_RemoveExistingComponent=Replacing existing component: {1} ({0}, version {2}) with {4} ({3}, version {5})
INSTALL_InstallNewComponent=Installing new component: {1} ({0}, version {2})
UNINSTALL_DeletingDirectoryRecursively=Erasing subtree: {0}
INSTALL_RebuildPolyglotNeeded=\
\nIMPORTANT NOTE:\n\
---------------\n\
Set of Graal VM components that provide language implementations have changed. The Polyglot native \
image and polyglot native C library may be out of sync: \n\
- new languages may not be accessible\n\
- removed languages may cause the native binary to fail on missing resources or libraries.\n\
To rebuild and refresh the native binaries, use the following command:\
    \n        {1}{0}gu rebuild-images\n\n


INSTALLER_FailError={0}

UNINSTALL_UnknownComponentId=Unknown component id: {0}. Use "component-install list" to get list of components and their IDs.
UNINSTALL_IgnoreFailed=Failed uninstallation of {0} ignored. The error was: {1}
UNINSTALL_ErrorDuringProcessing=Uninstallation failed: {0}
UNINSTALL_UninstallingComponent=Uninstalling: {0}
UNINSTALL_DeletingFile=Deleting: {0}
UNINSTALL_DeletingDirectory=Deleting directory: {0}
UNINSTALL_ErrorRestoringPermissions=Error restoring permissions for {0}: {1}

INSTALL_ParametersMissing=Missing filename(s) of component bundle(s) to install.
INSTALL_Help=\
    Usage:\n\
    gu install [-0cfFnorvyxY] param [param ...]\n\
\n\
Options:\n\
    \t--dry-run\n\
    \t-0        dry run, do not change anything\n\
    \t--catalog\n\
    \t-c      treat parameters as component IDs from catalog of GraalVM components. This is the default.\n\
    \t--file\n\
    \t-F      treat parameters as filenames of packaged components\n\
    \t--force\n\
    \t-f        force overwrite, bypass version checks\n\
    \t--no-progress\n\
    \t-n        do not display download progress\n\
    \t--overwrite\n\
    \t-o        overwrite different files\n\
    \t--replace\n\
    \t-r        replace existing components\n\
    \t--url\n\
    \t-u      interpret parameters as URLs of packaged components\n\
    \t--verbose\n\
    \t-v      be verbose. Prints versions and dependency info\n\
    \t--ignore\n\
    \t-x        ignore failures\n\
    \t--only-validate\n\
    \t-y        do not install, just check compatibility and conflicting files\n\
    \t--validate-before\n\
    \t-Y        downloads, verifies, checks file conflict before any disk change is made\n
    

UNINSTALL_ParametersMissing=Missing component ID(s) to uninstall.
UNINSTALL_Help=\
    Usage:\n\
    gu uninstall [-0fxv] id [id ...]\n\
\n\
Options:\n\
    \t--dry-run\n\
    \t-0        dry run, do not change anything\n\
    \t--force\n\
    \t-f        force overwrite, bypass version checks\n\
    \t--ignore\n\
    \t-x        do not stop on undeletable files\n\
    \t--verbose\n\
    \t-v      be verbose. Prints versions and dependency info\n\

LIST_NoComponentsFound=No components found.
LIST_ComponentShortListHeader=\
ComponentId              Version             Component name\n\
----------------------------------------------------------------
#                        25                  +20
# The following bundle is actually a String.format format pattern.
# The most important is the width and precision which should follow the header widths
LIST_ComponentShortList=%1$-25.25s%2$-20.20s%3$s
LIST_PrintVerbatim={0}
LIST_ComponentFilesHeader={0} installed files and directories:
LIST_MetadataUnknown=n/a
LIST_ComponentBasicInfo=\
ID      : {0}\n\
Name    : {2}\n\
Version : {1}\n\
GraalVM : {3}\n
LIST_RequirementsHeader=Requirements
LIST_ErrorInComponentMetadata=There were errors reading component information:
LIST_ErrorInComponentMetadataItem=    - {0}

LIST_Help=\
    Usage:\n\
    gu list [-clv] [<expression> [<expression2> ...]]\n\
\n\
    The expression filters installed or catalog components. Can be a component ID,\
    or a regular expression, optionally enclosed in quotes or double quotes.\
    If no expression is given, all installed components are listed.\n\
\n\
    Options:\n\
    \t--catalog\n\
    \t-c        list components available in catalog. Same as "gu available" for compatibility\n\
    \t--list-files\n\
    \t-l        list files. Only for installed components\n\
    \t--verbose\n\
    \t-v        more detailed info


AVAILABLE_Help=\
    Usage:\n\
    gu available [-lv] [<expression> [<expression2> ...]]\n\
\n\
    The expression filters catalog components. Can be a component ID,\
    or a regular expression, optionally enclosed in quotes or double quotes.\
    If no expression is given, all installed components are listed.\n\
\n\
    Options:\n\
    \t--list-files\n\
    \t-l        list files. Only for installed components\n\
    \t--verbose\n\
    \t-v        more detailed info

INFO_Help=\
    Usage:\n\
    gu info [-cFlprstuv] <param> [<param> ...]\n\
\n\
    Prints information about the component in the specified file or about a specific \
    component in the catalog.\n\
\n\
    Options:\n\
    \t--catalog\n\
    \t-c        treat parameters as component IDs from catalog of GraalVM components. This is the default.\n\
    \t--file\n\
    \t-F        treat parameters as filenames of packaged components\n\
    \t--list-files\n\
    \t-l        list files\n\
    \t--no-progress\n\
    \t-n        do not display download progress\n\
    \t--paths\n\
    \t-p        displays full path in table listing\n\
    \t--verify-jars\n\
    \t-s        verify JAR signatures\n\
    \t--no-tables\n\
    \t-t        do NOT use table listings\n\
    \t--url\n\
    \t-u      interpret parameters as URLs of packaged components\n\
    \t--verbose\n\
    \t-v      be verbose. Prints versions and dependency info\n

INFO_ClosingComponent=Error closing component bundle {0}: {1}
INFO_ErrorOpeningBundle=Invalid or corrupted component bundle {0}: {1}
INFO_ErrorReadingBundle=I/O error reading component bundle {0}: {1}
INFO_CorruptedBundleMetadata=Invalid or missing metadata {1} in bundle {0}: {2}
INFO_MissingFilename=Missing filename.

INFO_ComponentShortListHeader=\
File                ComponentId              Version    Component name\n\
--------------------------------------------------------------------------------
#                   +20                      +25        +11
#
# The following bundle is actually a String.format format pattern.
# The most important is the width and precision which should follow the header widths
INFO_ComponentShortList=%4$-20.20s%1$-25.25s%2$-11.11s%3$s

INFO_ComponentLongListHeader=\
Path\n\
    ComponentId              Version             Component name\n\
--------------------------------------------------------------------------------
#                            +25                 +20
# The following bundle is actually a String.format format pattern.
# The most important is the width and precision which should follow the header widths
INFO_ComponentLongList=%4$s\n    %1$-25.25s%2$-20.20s%3$s

INFO_ComponentNoFileHeader=\
ComponentId              Version                 Component name\n\
--------------------------------------------------------------------------------
#+00                     +25                     +20
#
# The following bundle is actually a String.format format pattern.
# The most important is the width and precision which should follow the header widths
INFO_ComponentShortList=%1$-25.25s%2$-20.20%3$s

INFO_ComponentBasicInfo=\
Filename: {3}\n\
Name    : {2}\n\
ID      : {0}\n\
Version : {1}\n\
GraalVM : {4}

INFO_ComponentRequirementsHeader=Requirements:
INFO_ComponentRequirement=\t{0} = {1}

INFO_ComponentBroken=Component bundle {0} is broken
INFO_ComponentErrorIndent=\t- {0}
INFO_ComponentWillNotInstall=Component bundle {0} cannot be installed
INFO_ComponentDependencyIndent=\t- {0}

# Relative path from GRAAL_HOME to the rebuild-images tool
REBUILD_ToolRelativePath=jre/lib/svm/bin/rebuild-images
REBUILD_ImageToolInterrupted=The image rebuild has been interrupted.
REBUILD_RewriteRebuildToolName=gu rebuild-images
