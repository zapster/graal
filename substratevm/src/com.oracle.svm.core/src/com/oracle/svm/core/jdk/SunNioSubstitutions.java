/*
 * Copyright (c) 2013, 2017, Oracle and/or its affiliates. All rights reserved.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This code is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License version 2 only, as
 * published by the Free Software Foundation.
 *
 * This code is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 * version 2 for more details (a copy is included in the LICENSE file that
 * accompanied this code).
 *
 * You should have received a copy of the GNU General Public License version
 * 2 along with this work; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
 * or visit www.oracle.com if you need additional information or have any
 * questions.
 */
package com.oracle.svm.core.jdk;

// Checkstyle: allow reflection

import java.io.FileDescriptor;
import java.net.InetAddress;
import java.nio.channels.spi.SelectorProvider;

import org.graalvm.nativeimage.Platform;
import org.graalvm.nativeimage.Platforms;

import com.oracle.svm.core.annotate.Alias;
import com.oracle.svm.core.annotate.Substitute;
import com.oracle.svm.core.annotate.TargetClass;
import com.oracle.svm.core.snippets.KnownIntrinsics;
import com.oracle.svm.core.util.VMError;

@TargetClass(className = "sun.nio.ch.Util")
final class Target_sun_nio_ch_Util {

    @Substitute
    private static Target_java_nio_DirectByteBuffer newMappedByteBuffer(int size, long addr, FileDescriptor fd, Runnable unmapper) {
        return new Target_java_nio_DirectByteBuffer(size, addr, fd, unmapper);
    }

    @Substitute
    static Target_java_nio_DirectByteBufferR newMappedByteBufferR(int size, long addr, FileDescriptor fd, Runnable unmapper) {
        return new Target_java_nio_DirectByteBufferR(size, addr, fd, unmapper);
    }
}

/* { Do not re-format commented code: @formatter:off */
/** Translations of src/solaris/classes/sun/nio/ch/DefaultSelectorProvider.java?v=Java_1.8.0_40_b10. */
@TargetClass(className = "sun.nio.ch.DefaultSelectorProvider")
final class Target_sun_nio_ch_DefaultSelectorProvider {

    /* Private constructor: No instances. */
    private Target_sun_nio_ch_DefaultSelectorProvider() {
    }

    // 059     /**
    // 060      * Returns the default SelectorProvider.
    // 061      */
    // 062     public static SelectorProvider create() {
    @Substitute
    private static SelectorProvider create() {
        // 063         String osname = AccessController
        // 064             .doPrivileged(new GetPropertyAction("os.name"));
        // 065         if (osname.equals("SunOS"))
        // 066             return createProvider("sun.nio.ch.DevPollSelectorProvider");
        // 067         if (osname.equals("Linux"))
        // 068             return createProvider("sun.nio.ch.EPollSelectorProvider");
        if (Platform.includedIn(Platform.LINUX.class)) {
            return KnownIntrinsics.unsafeCast(new Target_sun_nio_ch_EPollSelectorProvider(), SelectorProvider.class);
        }
        // 069         return new sun.nio.ch.PollSelectorProvider();
        return new sun.nio.ch.PollSelectorProvider();
    }
}
/* } Do not re-format commented code: @formatter:on */

/** A substitution to hide a class that exists only on Linux platforms. */
@Platforms({Platform.LINUX.class})
@TargetClass(className = "sun.nio.ch.EPollSelectorProvider")
final class Target_sun_nio_ch_EPollSelectorProvider {

    /** An alias to get access to the default constructor. */
    @Alias
    Target_sun_nio_ch_EPollSelectorProvider() {
        /* The default constructor generated by javac is empty. */
    }
}

@SuppressWarnings({"unused"})
@TargetClass(sun.nio.ch.Net.class)
final class Target_sun_nio_ch_Net {

    @Substitute
    static int getInterface4(FileDescriptor fd) {
        throw VMError.unsupportedFeature("Unimplemented:  sun.nio.ch.Net.getInterface4(FileDescriptor)");
    }

    @Substitute
    static int getInterface6(FileDescriptor fd) {
        throw VMError.unsupportedFeature("Unimplemented:  sun.nio.ch.Net.getInterface6(FileDescriptor)");
    }

    @Substitute
    static void setInterface4(FileDescriptor fd, int interf) {
        throw VMError.unsupportedFeature("Unimplemented: sun.nio.ch.Net.setInterface4(FileDescriptor, int)");
    }

    @Substitute
    static void setInterface6(FileDescriptor fd, int index) {
        throw VMError.unsupportedFeature("Unimplemented:  sun.nio.ch.Net.setInterface6(FileDescriptor, int)");
    }
}

@SuppressWarnings({"unused", "static-method"})
@TargetClass(className = "sun.nio.ch.DatagramChannelImpl")
final class Target_sun_nio_ch_DatagramChannelImpl {

    @Substitute
    private int receive0(FileDescriptor fd, long address, int len, boolean connected) {
        throw VMError.unsupportedFeature("Unimplemented: sun.nio.ch.DatagramChannelImpl.receive0(FileDescriptor, long, int, boolean)");
    }

    @Substitute
    private int send0(boolean preferIPv6, FileDescriptor fd, long address, int len, InetAddress addr, int port) {
        throw VMError.unsupportedFeature("Unimplemented: sun.nio.ch.DatagramChannelImpl.send0(boolean, FileDescriptor, long, int, InetAddress, int)");
    }
}

@SuppressWarnings({"unused"})
@TargetClass(className = "sun.nio.ch.DatagramDispatcher")
final class Target_sun_nio_ch_DatagramDispatcher {

    @Substitute
    static int write0(FileDescriptor fd, long address, int len) {
        throw VMError.unsupportedFeature("Unimplemented: sun.nio.ch.DatagramChannelImpl.receive0(FileDescriptor, long, int)");
    }
}

/** Dummy class to have a class with the file's name. */
public final class SunNioSubstitutions {
}
